sum_pois
}
sum_of_poissons()
sum_of_poissons <- function( n = 1 , k = 1) {
sum_pois = sum(rpois(n, k))
sum_pois
}
sum_of_poissons()
sum_of_poissons <- function( n = 1 , k = 1) {
sum_pois = sum(rpois(n, k))
sum_pois
}
sum_of_poissons()
sum_of_poissons <- function( n = 1 , k = 1) {
sum_pois = sum(rpois(n, k))
sum_pois
}
sum_of_poissons()
sum_of_poissons <- function( n = 1 , k = 1) {
sum_pois = sum(rpois(n, k))
sum_pois
}
sum_of_poissons()
sum_of_poissons <- function( n = 1 , k = 1) {
sum_pois = sum(rpois(n, k))
sum_pois
}
sum_of_poissons()
sum_of_poissons <- function( n = 1 , k = 1) {
sum_pois = sum(rpois(n, k))
sum_pois
}
sum_of_poissons()
sum_of_poissons <- function( n = 1 , k = 1) {
sum_pois = sum(rpois(n, k))
sum_pois
}
sum_of_poissons()
sum_of_poissons <- function( n = 1 , k = 1) {
sum_pois = sum(rpois(n, k))
sum_pois
}
sum_of_poissons()
sum_of_poissons <- function( n = 1 , k = 1) {
sum_pois = sum(rpois(n, k))
sum_pois
}
sum_of_poissons()
max_of_normals = function(n, mu = 0, sigma = 1){
if (n == 0){
return(-Inf)
}
max_rv = max(rnorm(n, mu, sigma))
max_rv
}
max_of_normals(0)
max_of_normals = function(n, mu = 0, sigma = 1){
if (n == 0){
return(-Inf)
}
max_rv = max(rnorm(n, mu, sigma))
max_rv
}
max_of_normals(1)
max_of_normals = function(n, mu = 0, sigma = 1){
if (n == 0){
return(-Inf)
}
max_rv = max(rnorm(n, mu, sigma))
max_rv
}
max_of_normals(10)
# Exponential, for values k=0,1,2,...,20:
#
k <- seq(0,20);
plot( k, dexp(k,rate=1) )
# Binomial(n=10,p=0.3), for values k=0,1,2,...,9,10:
k = seq(0, 10)
plot(k, dbinom(k, 10, .3))
# Normal(mean=0,sd=1), for x in [-3,3] in increments of size 0.1
x <- seq(-3,3,0.1);
# Note that this is a density, not a mass function,
# but for plotting purposes, we can't evaluate the pdf at
# EVERY point, so we'll just choose a few, encoded in x.
plot( x, dnorm(x,mean=0,sd=1))
# Normal(mean=1,sd=2), for x in [-5,7] in increments of size 0.1
y <- seq(-5,7,0.1)
plot(y , dnorm(y,mean=1,sd=2))
?plot
?plot()
# Exponential, for values k=0,1,2,...,20:
#
k <- seq(0,20);
plot( k, dexp(k,rate=1), main = "dexp(k,rate=1)", ylab = "Density" )
# Binomial(n=10,p=0.3), for values k=0,1,2,...,9,10:
k = seq(0, 10)
plot(k, dbinom(k, 10, .3), main = "dbinom(k, 10, .3)", ylab = "Density")
# Normal(mean=0,sd=1), for x in [-3,3] in increments of size 0.1
x <- seq(-3,3,0.1);
# Note that this is a density, not a mass function,
# but for plotting purposes, we can't evaluate the pdf at
# EVERY point, so we'll just choose a few, encoded in x.
plot( x, dnorm(x,mean=0,sd=1), main = "dnorm(x,mean=0,sd=1)", ylab = "Density")
# Normal(mean=1,sd=2), for x in [-5,7] in increments of size 0.1
y <- seq(-5,7,0.1)
plot(y , dnorm(y,mean=1,sd=2), main = "dnorm(y,mean=1,sd=2)", ylab = "Density")
# Exponential, for values k=0,1,2,...,20:
#
k <- seq(0,20);
plot( k, dexp(k,rate=1), main = "dexp(k,rate=1)", ylab = "Density" )
# Binomial(n=10,p=0.3), for values k=0,1,2,...,9,10:
k = seq(0, 10)
plot(k, dbinom(k, 10, .3), main = "dbinom(k, 10, .3)", ylab = "Density")
# Normal(mean=0,sd=1), for x in [-3,3] in increments of size 0.1
x <- seq(-3,3,0.1);
# Note that this is a density, not a mass function,
# but for plotting purposes, we can't evaluate the pdf at
# EVERY point, so we'll just choose a few, encoded in x.
plot( x, dnorm(x,mean=0,sd=1), main = "dnorm(x,mean=0,sd=1)", ylab = "Density")
# Normal(mean=1,sd=2), for x in [-5,7] in increments of size 0.1
y <- seq(-5,7,0.1)
plot(y , dnorm(y,mean=1,sd=2), main = "dnorm(y,mean=1,sd=2)", ylab = "Density")
# Exponential, for values k=0,1,2,...,20:
#
k <- seq(0,20);
plot( k, dexp(k,rate=1), main = "dexp(k,rate=1)", ylab = "Density" )
# Binomial(n=10,p=0.3), for values k=0,1,2,...,9,10:
k = seq(0, 10)
plot(k, dbinom(k, 10, .3), main = "dbinom(k, 10, .3)", ylab = "Density")
# Normal(mean=0,sd=1), for x in [-3,3] in increments of size 0.1
x <- seq(-3,3,0.1);
# Note that this is a density, not a mass function,
# but for plotting purposes, we can't evaluate the pdf at
# EVERY point, so we'll just choose a few, encoded in x.
plot( x, dnorm(x,mean=0,sd=1), main = "dnorm(x,mean=0,sd=1)", ylab = "Density")
# Normal(mean=1,sd=2), for x in [-5,7] in increments of size 0.1
x <- seq(-5,7,0.1)
plot(x , dnorm(x,mean=1,sd=2), main = "dnorm(y,mean=1,sd=2)", ylab = "Density")
# Exponential, for values k=0,1,2,...,20:
#
k <- seq(0,20);
plot( k, dexp(k,rate=1), main = "dexp(k,rate=1)", ylab = "Density" )
# Binomial(n=10,p=0.3), for values k=0,1,2,...,9,10:
k = seq(0, 10)
plot(k, dbinom(k, 10, .3), main = "dbinom(k, 10, .3)", ylab = "Density")
# Normal(mean=0,sd=1), for x in [-3,3] in increments of size 0.1
x <- seq(-3,3,0.1);
# Note that this is a density, not a mass function,
# but for plotting purposes, we can't evaluate the pdf at
# EVERY point, so we'll just choose a few, encoded in x.
plot( x, dnorm(x,mean=0,sd=1), main = "dnorm(x,mean=0,sd=1)", ylab = "Density")
# Normal(mean=1,sd=2), for x in [-5,7] in increments of size 0.1
x <- seq(-5,7,0.1)
plot(x , dnorm(x,mean=1,sd=2), main = "dnorm(y,mean=1,sd=2)", ylab = "Density")
# Exponential, for values k=0,1,2,...,20:
#
k <- seq(0,20);
plot( k, dexp(k,rate=1), main = "dexp(k,rate=1)", ylab = "Density" )
# Binomial(n=10,p=0.3), for values k=0,1,2,...,9,10:
k = seq(0, 10)
plot(k, dbinom(k, 10, .3), main = "dbinom(k, 10, .3)", ylab = "Density")
# Normal(mean=0,sd=1), for x in [-3,3] in increments of size 0.1
x <- seq(-3,3,0.1);
# Note that this is a density, not a mass function,
# but for plotting purposes, we can't evaluate the pdf at
# EVERY point, so we'll just choose a few, encoded in x.
plot( x, dnorm(x,mean=0,sd=1), main = "dnorm(x,mean=0,sd=1)", ylab = "Density")
# Normal(mean=1,sd=2), for x in [-5,7] in increments of size 0.1
x <- seq(-5,7,0.1)
plot(x , dnorm(x,mean=1,sd=2), main = "dnorm(x,mean=1,sd=2)", ylab = "Density")
# Chunk 1
# Reminder: the r at the start of these function names stands for Random
?rbinom
?rgeom
?rpois
# Chunk 2
# generate a single Binomial random variable:
rbinom(n = 1, size = 10, prob = .3)
# generate a single Geometric random variable:
rgeom(n = 1, prob = .3)
# generate a single Poisson random variable:
rpois(n = 1, lambda = 10 )
# Chunk 3
# generate 10 Binomial random variables:
rbinom(n = 10, size = 10, prob = .3)
# Reminder: the Binomial is a bit confusing-- there is a size parameter,
# which corresponds to the parameter we usually denote n,
# and this n is not the same n as the n argument to rbinom.
# Confusing, I know. You'll have to take it up with the R development team.
# generate 10 Geometric random variables:
rgeom(n=10, p=0.25)
# generate 10 Poisson random variables:
rpois(n = 10, lambda = 10 )
# Chunk 4
# Exponential:
hist(rexp(n=1000, rate=1/5))
# Alternative choice, using magrittr:
#library(magrittr)
#rexp(10000, rate=1/5) %>% hist
# Binomial:
hist(rbinom(n = 1000, size = 30, prob = .5))
# Normal:
hist(rnorm(n = 1000, mean = 10, sd = 5))
# Chunk 5
# Exponential:
hist(rexp(n = 1000, rate = 1))
# alternative solution using magrittr:
#library(magrittr)
#rexp(1000, rate=1) %>% hist
# Binomial: (change p, not the size parameter)
hist(rbinom(n = 100000, size = 30, prob = .75))
# Binomial: (change the size parameter, not p)
hist(rbinom(n = 1000, size = 20, prob = .5))
# Normal: (change the mean, not the standard deviation)
hist(rnorm(n = 1000, mean = 20, sd = 5))
# Normal: (change the standard deviation, not the mean)
hist(rnorm(n = 1000, mean = 10, sd = 20))
# Chunk 6
# Exponential, for values k=0,1,2,...,20:
#
k <- seq(0,20);
plot( k, dexp(k,rate=1), main = "dexp(k,rate=1)", ylab = "Density" )
# Binomial(n=10,p=0.3), for values k=0,1,2,...,9,10:
k = seq(0, 10)
plot(k, dbinom(k, 10, .3), main = "dbinom(k, 10, .3)", ylab = "Density")
# Normal(mean=0,sd=1), for x in [-3,3] in increments of size 0.1
x <- seq(-3,3,0.1);
# Note that this is a density, not a mass function,
# but for plotting purposes, we can't evaluate the pdf at
# EVERY point, so we'll just choose a few, encoded in x.
plot( x, dnorm(x,mean=0,sd=1), main = "dnorm(x,mean=0,sd=1)", ylab = "Density")
# Normal(mean=1,sd=2), for x in [-5,7] in increments of size 0.1
x <- seq(-5,7,0.1)
plot(x , dnorm(x,mean=1,sd=2), main = "dnorm(x,mean=1,sd=2)", ylab = "Density")
# Chunk 7
sum_of_normals <- function( n ){
sum_norms = sum(rnorm(n, 0, 1))
sum_norms
}
# Chunk 8
sum_of_poissons <- function( n = 1 , k = 1) {
sum_pois = sum(rpois(n, k))
sum_pois
}
# Chunk 9
max_of_normals = function(n, mu = 0, sigma = 1){
if (n == 0){
return(-Inf)
}
max_rv = max(rnorm(n, mu, sigma))
max_rv
}
sum_of_normals(5)
sum_of_normals <- function( n ){
sum_norms = sum(rnorm(n, 0, 1))
return (sum_norms)
}
sum_of_normals(5)
sum_of_normals <- function( n ){
sum_norms = sum(rnorm(n, 0, 1))
return (sum_norms)
}
sum_of_normals(5)
sum_of_normals <- function( n ){
sum_norms = sum(rnorm(n, 0, 1))
return (sum_norms)
}
sum_of_normals(5)
sum_of_normals <- function( n ){
sum_norms = sum(rnorm(n, 0, 1))
return (sum_norms)
}
sum_of_normals(5)
sum_of_poissons5
sum_of_poissons <- function( n = 1 , k = 1) {
sum_pois = sum(rpois(n, k))
return (sum_pois)
}
sum_of_poissons(5)
sum_of_poissons <- function( n = 1 , k = 1) {
sum_pois = sum(rpois(n, k))
return (sum_pois)
}
sum_of_poissons(5)
sum_of_poissons <- function( n = 1 , k = 1) {
sum_pois = sum(rpois(n, k))
return (sum_pois)
}
sum_of_poissons(5)
max_of_normals(5)
max_of_normals = function(n, mu = 0, sigma = 1){
if (n == 0){
return(-Inf)
}
max_rv = max(rnorm(n, mu, sigma))
return(max_rv)
}
max_of_normals(5)
max_of_normals = function(n, mu = 0, sigma = 1){
if (n == 0){
return(-Inf)
}
max_rv = max(rnorm(n, mu, sigma))
return(max_rv)
}
max_of_normals(5)
max_of_normals = function(n, mu = 0, sigma = 1){
if (n == 0){
return(-Inf)
}
max_rv = max(rnorm(n, mu, sigma))
return(max_rv)
}
max_of_normals(5)
max_of_normals = function(n, mu = 0, sigma = 1){
if (n == 0){
return(-Inf)
}
max_rv = max(rnorm(n, mu, sigma))
return(max_rv)
}
max_of_normals(5)
max_of_normals = function(n, mu = 0, sigma = 1){
if (n == 0){
return(-Inf)
}
max_rv = max(rnorm(n, mu, sigma))
return(max_rv)
}
max_of_normals(5)
library(tidyr)
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(tidyr)
setwd("~/Documents/okc internship")
okc_shots = read.csv("shots_data.csv")
View(okc_shots)
okc_shots = read.csv("shots_data.csv")
okc_shots %>% mutate(fg_type = case_when( y > 7.8 & sqrt((x^2 + y^2)) > 23.75 ~ "Non_corner_3",
y <= 7.8 & sqrt((x^2 + y^2)) > 22.0 ~ "Corner_3",
TRUE ~ "Two_pt"))
okc_shots = read.csv("shots_data.csv")
okc_shot_type = okc_shots %>% mutate(fg_type = case_when( y > 7.8 & sqrt((x^2 + y^2)) > 23.75 ~ "Non_corner_3", y <= 7.8 & sqrt((x^2 + y^2)) > 22.0 ~ "Corner_3",TRUE ~ "Two_pt"))
View(okc_shot_type)
-8.2^2
okc_shots = read.csv("shots_data.csv")
okc_shot_type = okc_shots %>% mutate(fg_type = case_when( y > 7.8 & sqrt((abs(x)^2 + abs(y)^2)) > 23.75 ~ "Non_corner_3", y <= 7.8 & sqrt((x^2 + y^2)) > 22.0 ~ "Corner_3",TRUE ~ "Two_pt"))
View(okc_shot_type)
sqrt((abs(-9)^2 + abs(12)^2))
View(okc_shot_type)
shot_distribution = okc_shot_type %>% group_by(team) %>% mutate(total = n())
View(shot_distribution)
shot_distribution = okc_shot_type %>% group_by(team) %>% mutate(total = n()) %>% group_by(team, fg_type) %>% summarise(n = n(), distribution = n / total)
View(shot_distribution)
shot_distribution = okc_shot_type %>% group_by(team, fg_type) %>% summarise(n = n() )
okc_shot_type %>% group_by(team, fg_type) %>% summarise(n = n() )
okc_shot_type %>% group_by(team, fg_type) %>% summarise(n = n(), distribution = n / sum(n) )
okc_shot_type %>% group_by(team, fg_type) %>% summarise(n = n(), distribution = sum(n) )
okc_shot_type %>% count(team, fg_type)
okc_shot_type %>% group_by(team, fg_type) %>% summarise(total = n())
okc_shot_type %>% group_by(team, fg_type) %>% summarise(total = n()) %>% mutate(distribution = total / sum(total))
okc_shot_dist = okc_shot_type %>% group_by(team, fg_type) %>% summarise(total = n()) %>% mutate(distribution = total / sum(total))
View(shot_distribution)
okc_shot_dist = okc_shot_type %>% group_by(team, fg_type) %>% summarise(total = n()) %>% mutate(distribution = total / sum(total))
View(okc_shot_dist)
okc_shot_type %>% group_by(team, fg_type) %>% summarise(total = n(), made = sum(fgmade))
View(okc_shot_type)
View(okc_shot_dist)
okc_shot_dist[team, fg_type]
okc_shot_dist['team', 'fg_type']
View(okc_shot_dist)
okc_shot_dist['team', 'fg_type', 'distribution']
okc_shot_dist['team', 'fg_type']$distribution
okc_shot_type %>% group_by(team, fg_type) %>% summarise(total = n(), made = sum(fgmade), fg3_made =  )
okc_shot_type %>% group_by(team, fg_type) %>% summarise(total = n(), made = sum(fgmade))
okc_shot_type %>% group_by(team, fg_type) %>% summarise(total = n(), made = sum(fgmade) , fg3_made = fg_type$Corner_3)
okc_shot_type %>% group_by(team, fg_type) %>% summarise(total = n(), fg_made = sum(fgmade))
fg_df$fg_made
fg_df = okc_shot_type %>% group_by(team, fg_type) %>% summarise(total = n(), fg_made = sum(fgmade))
fg_df$fg_made
fg_df$fg_made[fg_df$fg_type == "Corner_3"]
#Setting up variables
okc_shots = read.csv("shots_data.csv")
okc_shot_type = okc_shots %>% mutate(fg_type = case_when( y > 7.8 & sqrt((abs(x)^2 + abs(y)^2)) > 23.75 ~ "Non_corner_3", y <= 7.8 & sqrt((abs(x)^2 + abs(y)^2)) > 22.0 ~ "Corner_3",TRUE ~ "Two_pt"))
#getting distribution
okc_shot_dist = okc_shot_type %>% group_by(team, fg_type) %>% summarise(total = n()) %>% mutate(distribution = total / sum(total))
View(okc_shot_dist)
#getting distribution
okc_shot_dist = okc_shot_type %>% group_by(team, fg_type) %>% summarise(total = n()) %>% mutate(distribution = total / sum(total), fg_made = sum(fg_made))
okc_shot_dist = okc_shot_type %>% group_by(team, fg_type) %>% summarise(total = n()) %>% mutate(distribution = total / sum(total), fg_made = sum(fgmade))
#getting distribution
okc_shot_dist = okc_shot_type %>% group_by(team, fg_type) %>% summarise(total = n()) %>% mutate(distribution = total / sum(total), fg_made = sum(fgmade))
View(okc_shot_type)
#Setting up variables
okc_shots = read.csv("shots_data.csv")
okc_shot_type = okc_shots %>% mutate(fg_type = case_when( y > 7.8 & sqrt((abs(x)^2 + abs(y)^2)) > 23.75 ~ "Non_corner_3", y <= 7.8 & sqrt((abs(x)^2 + abs(y)^2)) > 22.0 ~ "Corner_3",TRUE ~ "Two_pt"))
#getting distribution
okc_shot_dist = okc_shot_type %>% group_by(team, fg_type) %>% summarise(total = n()) %>% mutate(distribution = total / sum(total), fg_made = sum(fgmade))
okc_shot_dist = okc_shot_type %>% group_by(team, fg_type) %>% summarise(total = n()) %>% mutate(distribution = total / sum(total))
View(okc_shot_dist)
okc_shot_dist = okc_shot_type %>% group_by(team, fg_type) %>% summarise(total = n(), fg_made = sum(fgmade)) %>% mutate(distribution = total / sum(total))
View(okc_shot_dist)
View(okc_shot_type)
library(stringr)
#getting distribution
okc_shot_dist = okc_shot_type %>% group_by(team, fg_type) %>% summarise(total = n(), fg_made = sum(fgmade)) %>% mutate(distribution = total / sum(total))
fg3_made = okc_shot_dist %>% group_by(team) %>% summarise( fg3m = okc_shot_dist$fg_made[okc_shot_dist$fg_type == "Corner_3"] + okc_shot_dist$fg_made[okc_shot_dist$fg_type == "Non_corner_3"])
View(fg3_made)
View(okc_shot_dist)
fg3_made = okc_shot_dist %>% group_by(team) %>% summarise( fg3m = okc_shot_dist$fg_made[okc_shot_dist$fg_type == "Corner_3"] + okc_shot_dist$fg_made[okc_shot_dist$fg_type == "Non_corner_3"])
fg3_made = okc_shot_dist %>% filter(okc_shot_type == "Corner_3" | "Non_corner_3")
View(okc_shot_dist)
fg3_made = okc_shot_dist %>% filter(fg_type == "Corner_3" | "Non_corner_3")
fg3_made = okc_shot_dist %>% filter(fg_type == "Corner_3" | fg_type == "Non_corner_3")
View(okc_shot_dist)
fg3_made = okc_shot_dist %>% filter(fg_type == "Corner_3" | fg_type == "Non_corner_3") %>% group_by(team) %>% summarise(fg3m = sum(fg_made))
View(fg3_made)
View(okc_shot_dist)
fg3_made = okc_shot_dist %>% filter(fg_type == "Corner_3" | fg_type == "Non_corner_3") %>% group_by(team) %>% summarise(fg3m = sum(fg_made))
View(fg3_made)
team_A = fg3_made$team[1]
team_A = fg3_made$fg3m[1]
team_A = c(fg3_made$fg3m[1])
fg3_made = okc_shot_dist %>% filter(fg_type == "Corner_3" | fg_type == "Non_corner_3") %>% group_by(team) %>% summarise(fg3m = sum(fg_made))
team_A = c(fg3_made$fg3m[1])
team_A
fg3_made = okc_shot_dist %>% filter(fg_type == "Corner_3" | fg_type == "Non_corner_3") %>% group_by(team) %>% summarise(fg3m = sum(fg_made))
team_A = c(fg3_made$fg3m[1])
team_B = c(fg3_made$fg3m[2])
View(okc_shot_dist)
#Setting up variables
okc_shots = read.csv("shots_data.csv")
okc_shot_type = okc_shots %>% mutate(fg_type = case_when( y > 7.8 & sqrt((abs(x)^2 + abs(y)^2)) > 23.75 ~ "Non_corner_3", y <= 7.8 & sqrt((abs(x)^2 + abs(y)^2)) > 22.0 ~ "Corner_3",TRUE ~ "Two_pt"))
#getting distribution
okc_shot_dist = okc_shot_type %>% group_by(team, fg_type) %>% summarise(total = n(), fg_made = sum(fgmade)) %>% mutate(distribution = total / sum(total))
View(okc_shot_dist)
team_B = c(fg3_made$fg3m[2])
fg3_made = okc_shot_dist %>% filter(fg_type == "Corner_3" | fg_type == "Non_corner_3") %>% group_by(team) %>% summarise(fg3m = sum(fg_made))
team_A = c(fg3_made$fg3m[1])
team_B = c(fg3_made$fg3m[2])
View(okc_shot_dist)
#getting distribution
okc_shot_dist = okc_shot_type %>% group_by(team, fg_type) %>% summarise(total = n(), fg_made = sum(fgmade)) %>% mutate(distribution = total / sum(total))
#Setting up variables
okc_shots = read.csv("shots_data.csv")
okc_shot_type = okc_shots %>% mutate(fg_type = case_when( y > 7.8 & sqrt((abs(x)^2 + abs(y)^2)) > 23.75 ~ "Non_corner_3", y <= 7.8 & sqrt((abs(x)^2 + abs(y)^2)) > 22.0 ~ "Corner_3",TRUE ~ "Two_pt"))
#getting distribution
okc_shot_dist = okc_shot_type %>% group_by(team, fg_type) %>% summarise(total = n(), fg_made = sum(fgmade)) %>% mutate(distribution = total / sum(total))
View(okc_shot_dist)
#getting distribution
okc_shot_dist = okc_shot_type %>% group_by(team, fg_type) %>% summarise(total = n(), fg_made = sum(fgmade)) %>% mutate(distribution = total / sum(total))
View(okc_shot_dist)
View(okc_shot_type)
fg3_made = okc_shot_dist %>% filter(fg_type == "Corner_3" | fg_type == "Non_corner_3") %>% group_by(team) %>% summarise(fg3m = sum(fg_made))
okc_shot_dist %>% mutate(fg3m = okc_shot_dist %>% filter(fg_type == "Corner_3" | fg_type == "Non_corner_3") %>% group_by(team) %>% summarise(fg3m = sum(fg_made))
fg3_made = okc_shot_dist %>% filter(fg_type == "Corner_3" | fg_type == "Non_corner_3") %>% group_by(team) %>% summarise(fg3m = sum(fg_made))
#getting distribution
okc_shot_dist = okc_shot_type %>% group_by(team, fg_type) %>% summarise(total = n(), fg_made = sum(fgmade)) %>% mutate(distribution = total / sum(total))
View(okc_shot_dist)
fg3_made = okc_shot_dist %>% filter(fg_type == "Corner_3" | fg_type == "Non_corner_3") %>% group_by(team) %>% summarise(fg3m = sum(fg_made))
team_A = c(fg3_made$fg3m[1])
team_B = c(fg3_made$fg3m[2])
View(okc_shot_dist)
#getting distribution
okc_shot_dist = okc_shot_type %>% group_by(team, fg_type) %>% summarise(total = n(), fg_made = sum(fgmade)) %>% mutate(distribution = total / sum(total))
team_A_stats = okc_shot_dist %>% filter(team == "Team A")
team_B_stats = okc_shot_dist %>% filter(team == "Team B")
View(team_A_stats)
team_A_stats %>% mutate(efg = (fg_made + (.5 * team_A) / total))
fg3_made = okc_shot_dist %>% filter(fg_type == "Corner_3" | fg_type == "Non_corner_3") %>% group_by(team) %>% summarise(fg3m = sum(fg_made))
team_A = c(fg3_made$fg3m[1])
team_B = c(fg3_made$fg3m[2])
team_A_stats = team_A_stats %>% mutate(efg = (fg_made + (.5 * team_A) / total))
team_B_stats = team_B_stats %>% mutate(efg = (fg_made + (.5 * team_B) / total))
View(team_B_stats)
fg3_made = okc_shot_dist %>% filter(fg_type == "Corner_3" | fg_type == "Non_corner_3") %>% group_by(team) %>% summarise(fg3m = sum(fg_made))
team_A = c(fg3_made$fg3m[1])
team_B = c(fg3_made$fg3m[2])
team_A_stats = team_A_stats %>% mutate(efg = (fg_made + (.5 * team_A)) / total)
team_B_stats = team_B_stats %>% mutate(efg = (fg_made + (.5 * team_B)) / total)
library(stringr)
okc_shot_type = okc_shots %>% mutate(fg_type = case_when( y > 7.8 & sqrt((abs(x)^2 + abs(y)^2)) > 23.75 ~ "Non_corner_3", y <= 7.8 & sqrt((abs(x)^2 + abs(y)^2)) > 22.0 ~ "Corner_3",TRUE ~ "Two_pt"))
library(dplyr)
library(tidyr)
library(stringr)
okc_shots = read.csv("shots_data.csv")
okc_shot_type = okc_shots %>% mutate(fg_type = case_when( y > 7.8 & sqrt((abs(x)^2 + abs(y)^2)) > 23.75 ~ "Non_corner_3", y <= 7.8 & sqrt((abs(x)^2 + abs(y)^2)) > 22.0 ~ "Corner_3",TRUE ~ "Two_pt"))
okc_shot_dist = okc_shot_type %>% group_by(team, fg_type) %>% summarise(total = n(), fg_made = sum(fgmade)) %>% mutate(distribution = total / sum(total))
team_A_stats = okc_shot_dist %>% filter(team == "Team A")
team_B_stats = okc_shot_dist %>% filter(team == "Team B")
fg3_made = okc_shot_dist %>% filter(fg_type == "Corner_3" | fg_type == "Non_corner_3") %>% group_by(team) %>% summarise(fg3m = sum(fg_made))
team_A = c(fg3_made$fg3m[1])
team_B = c(fg3_made$fg3m[2])
team_A_stats = team_A_stats %>% mutate(efg = (fg_made + (.5 * team_A)) / total)
team_B_stats = team_B_stats %>% mutate(efg = (fg_made + (.5 * team_B)) / total)
View(team_A_stats)
#getting distribution
okc_shot_dist = okc_shot_type %>% group_by(team, fg_type) %>% summarise(total = n(), fg_made = sum(fgmade)) %>% mutate(distribution = (total / sum(total) * 100)
team_A_stats = okc_shot_dist %>% filter(team == "Team A")
#Setting up variables
okc_shots = read.csv("shots_data.csv")
okc_shot_type = okc_shots %>% mutate(fg_type = case_when( y > 7.8 & sqrt((abs(x)^2 + abs(y)^2)) > 23.75 ~ "Non_corner_3", y <= 7.8 & sqrt((abs(x)^2 + abs(y)^2)) > 22.0 ~ "Corner_3",TRUE ~ "Two_pt"))
#getting distribution
okc_shot_dist = okc_shot_type %>% group_by(team, fg_type) %>% summarise(total = n(), fg_made = sum(fgmade)) %>% mutate(distribution = (total / sum(total)) * 100)
team_A_stats = okc_shot_dist %>% filter(team == "Team A")
team_B_stats = okc_shot_dist %>% filter(team == "Team B")
fg3_made = okc_shot_dist %>% filter(fg_type == "Corner_3" | fg_type == "Non_corner_3") %>% group_by(team) %>% summarise(fg3m = sum(fg_made))
team_A = c(fg3_made$fg3m[1])
team_B = c(fg3_made$fg3m[2])
team_A_stats = team_A_stats %>% mutate(efg = ((fg_made + (.5 * team_A)) / total) * 100)
team_B_stats = team_B_stats %>% mutate(efg = ((fg_made + (.5 * team_B)) / total) * 100)
View(team_A_stats)
